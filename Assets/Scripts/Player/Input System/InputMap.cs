//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/Input System/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""PlayerInputMap"",
            ""id"": ""34be1ea4-21a9-4f8f-be39-ccdfc2820713"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d4f7b05b-d6e3-41db-8727-e214d548b110"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionInput"",
                    ""type"": ""Value"",
                    ""id"": ""f39d7f4e-0022-444a-92a2-f0e9b4b83079"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MenuInput"",
                    ""type"": ""Button"",
                    ""id"": ""ae125328-fdbc-4a11-84cf-225d4a7d8eb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""383cd6c3-90ab-4495-b622-01a107314a17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keys"",
                    ""id"": ""4b1e5742-81a9-43f8-b27f-cfde4df11f25"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a3a564f1-5630-422c-a900-1a35fc9e8098"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2ba9303e-fe5b-44de-bd1a-c9430d9ac401"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5431729d-41e7-432d-b32a-7264b1842346"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ccebe98e-1c5d-4e57-81b7-f95d76fd82ec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""33a6bf4c-0f33-4725-88ee-6f60096be529"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bc987ee-268e-4c98-a1d5-40c0460bf15d"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ad0c0f8-118c-445d-bd45-c334a99d99c1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe415b8a-394a-46e1-a88e-55323b702320"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputMap
        m_PlayerInputMap = asset.FindActionMap("PlayerInputMap", throwIfNotFound: true);
        m_PlayerInputMap_Movement = m_PlayerInputMap.FindAction("Movement", throwIfNotFound: true);
        m_PlayerInputMap_ActionInput = m_PlayerInputMap.FindAction("ActionInput", throwIfNotFound: true);
        m_PlayerInputMap_MenuInput = m_PlayerInputMap.FindAction("MenuInput", throwIfNotFound: true);
        m_PlayerInputMap_MouseInput = m_PlayerInputMap.FindAction("MouseInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputMap
    private readonly InputActionMap m_PlayerInputMap;
    private List<IPlayerInputMapActions> m_PlayerInputMapActionsCallbackInterfaces = new List<IPlayerInputMapActions>();
    private readonly InputAction m_PlayerInputMap_Movement;
    private readonly InputAction m_PlayerInputMap_ActionInput;
    private readonly InputAction m_PlayerInputMap_MenuInput;
    private readonly InputAction m_PlayerInputMap_MouseInput;
    public struct PlayerInputMapActions
    {
        private @InputMap m_Wrapper;
        public PlayerInputMapActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerInputMap_Movement;
        public InputAction @ActionInput => m_Wrapper.m_PlayerInputMap_ActionInput;
        public InputAction @MenuInput => m_Wrapper.m_PlayerInputMap_MenuInput;
        public InputAction @MouseInput => m_Wrapper.m_PlayerInputMap_MouseInput;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @ActionInput.started += instance.OnActionInput;
            @ActionInput.performed += instance.OnActionInput;
            @ActionInput.canceled += instance.OnActionInput;
            @MenuInput.started += instance.OnMenuInput;
            @MenuInput.performed += instance.OnMenuInput;
            @MenuInput.canceled += instance.OnMenuInput;
            @MouseInput.started += instance.OnMouseInput;
            @MouseInput.performed += instance.OnMouseInput;
            @MouseInput.canceled += instance.OnMouseInput;
        }

        private void UnregisterCallbacks(IPlayerInputMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @ActionInput.started -= instance.OnActionInput;
            @ActionInput.performed -= instance.OnActionInput;
            @ActionInput.canceled -= instance.OnActionInput;
            @MenuInput.started -= instance.OnMenuInput;
            @MenuInput.performed -= instance.OnMenuInput;
            @MenuInput.canceled -= instance.OnMenuInput;
            @MouseInput.started -= instance.OnMouseInput;
            @MouseInput.performed -= instance.OnMouseInput;
            @MouseInput.canceled -= instance.OnMouseInput;
        }

        public void RemoveCallbacks(IPlayerInputMapActions instance)
        {
            if (m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputMapActions @PlayerInputMap => new PlayerInputMapActions(this);
    public interface IPlayerInputMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnActionInput(InputAction.CallbackContext context);
        void OnMenuInput(InputAction.CallbackContext context);
        void OnMouseInput(InputAction.CallbackContext context);
    }
}
